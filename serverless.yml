service: lambda
frameworkVersion: "4.1.0"

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 2048
  timeout: 20
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
  environment: 
    # SQS_QUEUE_URL: ${cf:${self:service}-${sls:stage}.queueUrl}  # Comment this out for the initial 
    QUEUE_URL: 
      Ref: MyQueue
    TOPIC_ARN: 
      Ref: MySNSTopic
    ENV_VARS_FROM_FILE: ${file(src/config/${self:provider.stage}.json)}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-middleware

functions:
  MyAuthfunction: 
    handler: src/handlers/test/authrizor.authFunction 

  hello:
    name: hello
    handler: src/handlers/handler.hello
    events:
      - http:
          path: /hello
          method: get
  seeders:
    handler: seeders/index.runSeeders
    events:
      - http:
          path: seeders
          method: get
  migration:
    handler: src/handlers/migration.runMigrations
    events:
      - http:
          path: migration
          method: get

  getUsers:
    name: getUsers
    # middleware:
    #   - src/handlers/authMiddleware.authenticate
    handler: src/handlers/hr.hrHandler.users
    events:
      - http:
          path: /users
          method: post
          authorizer:
            name: MyAuthfunction
            type: REQUEST

  login:
    name: login
    handler: src/handlers/hr.hrHandler.login
    events:
      - http:
          path: /login
          method: post

  secretManager:
    name: secretManager
    handler: src/handlers/secretManager.configsecretmanager
    events:
      - http:
          path: /get-config-credentials
          method: get

  calculator:
    name: calculator
    handler: src/handlers/calculator.calculator
    events:
      - http:
          path: /calculator
          method: post

  sendMessage:
    handler: src/handlers/queuehandler.sendMessage
    environment:
      SQS_QUEUE_URL: 
        Ref: MyQueue
    events:
      - http:
          path: /send
          method: post

  receiveMessage:
    handler: src/handlers/queuehandler.receiveMessage
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - MyQueue
              - Arn
          maximumConcurrency: 250
  SENDSNS:
    handler: src/handlers/snshandler.SENDSNS
    events:
      - http:
          path: send-sns
          method: post

resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: MyQueue
    MySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: MySNSTopic